{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jacks\\\\Downloads\\\\react-lights-out-starter-code\\\\react-lights-out\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // TODO: create array-of-arrays of true/false values\n\n    return Array.from({\n      length: nrows\n    }).map(row => Array.from({\n      length: ncols\n    }).map(cell => Math.random() < chanceLightStartsOn));\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n\n    console.log(board);\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n      const boardCopy = oldBoard.map(row => [...row]);\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"YOU WIN!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  // make table board\n\n  // TODO\n\n  let tblBoard = [];\n  for (let x = 0; x < nrows; x++) {\n    let row = [];\n    for (let y = 0; y < ncols; y++) {\n      let coord = `${x}-${y}`;\n      row.push(/*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this));\n    }\n    tblBoard.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, x, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","Array","from","length","map","row","cell","Math","random","hasWon","console","log","every","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","push","isLit","flipCellsAroundMe","className","_c","$RefreshReg$"],"sources":["C:/Users/jacks/Downloads/react-lights-out-starter-code/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // TODO: create array-of-arrays of true/false values\n\n    return Array.from({length: nrows}).map(\n      row => Array.from({length: ncols}).map(\n          cell => Math.random() < chanceLightStartsOn\n      )\n  );\n}\n\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n\n    console.log(board)\n    return board.every((row) => row.every((cell) => !cell));\n\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n      const boardCopy = oldBoard.map((row) => [...row, ]);\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  if (hasWon()) {\n    return <div>YOU WIN!</div>;\n  }\n  // make table board\n\n  // TODO\n\n  let tblBoard = [] ; \n\n  for (let x = 0; x < nrows; x++){ \n    let row = []; \n      for (let y=0; y< ncols; y++ ){\n      let coord = `${x}-${y}`;\n      row.push(\n        <Cell \n        key={coord}\n        isLit={board[y][x]}\n        flipCellsAroundMe={()=> flipCellsAround(coord)} \n        />\n      );\n      }\n      tblBoard.push(<tr key={x}>{row}</tr>);\n  }\n  return (\n    <table className=\"Board\">\n    <tbody>{tblBoard}</tbody>\n    </table>\n    );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}